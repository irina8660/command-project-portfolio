import{A as l,S as u,N as d,K as p,i as f}from"./assets/vendor-MwdM1Q0X.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const r of e)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&s(i)}).observe(document,{childList:!0,subtree:!0});function n(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerPolicy&&(r.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?r.credentials="include":e.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(e){if(e.ep)return;e.ep=!0;const r=n(e);fetch(e.href,r)}})();document.addEventListener("DOMContentLoaded",()=>{new l(".questions",{duration:400,showMultiple:!0,openOnInit:[],elementClass:"question-group",triggerClass:"svg-icon-group",panelClass:"answer",collapse:!0,beforeOpen:o=>{const t=o.querySelector(".arrow-icon");t&&(t.style.transform="rotate(180deg)")},beforeClose:o=>{const t=o.querySelector(".arrow-icon");t&&(t.style.transform="rotate(0deg)")}})});document.addEventListener("DOMContentLoaded",async function(){const o=document.querySelector(".reviews"),t=document.querySelector(".reviews-block");try{let e=(await(await fetch("https://portfolio-js.b.goit.study/api/reviews")).json()).map(({avatar_url:i,author:c,review:a})=>`
     <li class="swiper-slide reviews-elem"> 
       <img class="reviews-img" src="${i}" alt="${c}">
       <div class="reviews-info">
         <p class="reviews-autor">${c}</p>
         <p class="reviews-text">${a}</p>
       </div>
     </li>
   `).join("");t.innerHTML=e;const r=new u(".swiper",{modules:[d,p],simulateTouch:!0,touchRatio:1,touchEventsTarget:"container",grabCursor:!0,slidesPerView:1,spaceBetween:16,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},keyboard:{enabled:!0,onlyInViewport:!0},breakpoints:{768:{slidesPerView:2},1280:{slidesPerView:4}}})}catch(n){console.error(n),t.innerHTML='<p class="not-found">Not found</p>';const s=new IntersectionObserver(e=>{e.forEach(r=>{r.isIntersecting&&(f.error({message:"Reviews not found",position:"topRight"}),s.disconnect())})},{threshold:.1});s.observe(o)}});
//# sourceMappingURL=index.js.map
